generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int    @unique @default(autoincrement())
  name        String
  accessLevel Int
  users       User[]
}

model EventLog {
  id         Int      @id @default(autoincrement())
  platform   String
  deviceId   String
  event      String?
  stackTrace String?
  timestamp  DateTime @default(now())
}

model Block {
  reason                     String
  blockerId                  Int
  creationDate               DateTime @default(now())
  id                         Int      @id @default(autoincrement())
  blockedId                  Int
  User_Block_blockedIdToUser User     @relation("Block_blockedIdToUser", fields: [blockedId], references: [id], onDelete: Cascade)
  User_Block_blockerIdToUser User     @relation("Block_blockerIdToUser", fields: [blockerId], references: [id], onDelete: Cascade)
}

model Category {
  id           Int     @id @default(autoincrement())
  categoryName String  @unique
  Pack         Pack[]  @relation("CategoryToPack")
  Short        Short[] @relation("CategoryToShort")
}

model Comment {
  id                           Int       @id @default(autoincrement())
  commentResponse              String
  creatorId                    Int
  shortsCommentId              Int?
  parentCommentId              Int?
  softDelete                   Boolean   @default(false)
  creationDate                 DateTime  @default(now())
  updatedAt                    DateTime  @default(now())
  reactions                    Json?
  packAsCommentId              Int?
  User_Comment_creatorIdToUser User      @relation("Comment_creatorIdToUser", fields: [creatorId], references: [id])
  Pack                         Pack?     @relation(fields: [packAsCommentId], references: [id], onDelete: Cascade)
  Comment                      Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  other_Comment                Comment[] @relation("CommentToComment")
  Short                        Short?    @relation(fields: [shortsCommentId], references: [id], onDelete: Cascade)
  Report                       Report[]
  User_commentDownVote         User[]    @relation("commentDownVote")
  User_commentUpVote           User[]    @relation("commentUpVote")
}

model Feedback {
  creationDate DateTime @default(now())
  id           Int      @id @default(autoincrement())
  reviewed     Boolean  @default(false)
  type         String   @default("Feedback")
  content      String
  userId       Int?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Log {
  id           Int        @id @default(autoincrement())
  action       Log_action
  event        String
  message      Json
  userId       Int
  creationDate DateTime   @default(now())
  User         User       @relation(fields: [userId], references: [id])
}

model Pack {
  id                        Int        @id @default(autoincrement())
  title                     String
  description               String
  published                 Boolean    @default(false)
  creatorId                 Int?
  titleImage                String?
  reactions                 Json
  creationDate              DateTime   @default(now())
  lastUpdated               DateTime   @default(now())
  initiative                String
  readTime                  Int
  imageIdentifier           String?
  Comment                   Comment[]
  User_Pack_creatorIdToUser User?      @relation("Pack_creatorIdToUser", fields: [creatorId], references: [id])
  pages                     PackPage[]
  Read                      Read[]
  Report                    Report[]
  User                      User[]
  Category                  Category[] @relation("CategoryToPack")
  User_bookmarkedByForPack  User[]     @relation("bookmarkedByForPack")
  User_userClap             User[]     @relation("userClap")
}

model PackPage {
  id         String         @unique
  pageNumber Int
  packId     Int
  type       String         @default("PageType.info")
  pack       Pack           @relation(fields: [packId], references: [id], onDelete: Cascade)
  items      PackPageItem[]
}

model PackPageItem {
  id           String                    @unique @default(uuid())
  type         String
  packPageId   String
  position     Int                       @default(0)
  notDeletable Boolean?                  @default(false)
  PackPage     PackPage                  @relation(fields: [packPageId], references: [id], onDelete: Cascade)
  bodyContent  PackPageItemBodyContent[]
  headContent  PackPageItemHeadContent?
}

model PackPageItemHeadContent {
  id       String        @unique
  value    String
  parentId String?       @unique
  parent   PackPageItem? @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model PackPageItemBodyContent {
  id              String       @unique
  value           String
  packPageItemId  String
  isCorrectAnswer Boolean?
  parent          PackPageItem @relation(fields: [packPageItemId], references: [id], onDelete: Cascade)
}

model Read {
  id           Int      @id @default(autoincrement())
  userId       Int
  packId       Int
  progress     Int      @default(0)
  creationDate DateTime @default(now())
  lastUpdated  DateTime @default(now())
  Pack         Pack     @relation(fields: [packId], references: [id], onDelete: Cascade)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id                Int      @id @default(autoincrement())
  userId            Int?
  creationDate      DateTime @default(now())
  reason            String
  reportedShortId   Int?
  reportedCommentId Int?
  reportedPackId    Int?
  Comment           Comment? @relation(fields: [reportedCommentId], references: [id])
  Pack              Pack?    @relation(fields: [reportedPackId], references: [id])
  Short             Short?   @relation(fields: [reportedShortId], references: [id])
  User              User?    @relation(fields: [userId], references: [id])
}

model Short {
  id                         Int        @id @default(autoincrement())
  title                      String
  content                    String     @db.VarChar(300)
  creatorId                  Int
  published                  Boolean    @default(false)
  requestPublish             Boolean    @default(true)
  reactions                  Json?
  creationDate               DateTime   @default(now())
  lastUpdated                DateTime   @default(now())
  userId                     Int?
  Comment                    Comment[]
  Report                     Report[]
  User_Short_creatorIdToUser User       @relation("Short_creatorIdToUser", fields: [creatorId], references: [id], onDelete: Cascade)
  Category                   Category[] @relation("CategoryToShort")
  User_clap                  User[]     @relation("Short_toUserClap")
  User_bookmarkedBy          User[]     @relation("bookmarkedBy")
  User_downVote              User[]     @relation("downVote")
  User_upVote                User[]     @relation("upVote")
}

model User {
  id                              Int        @id @default(autoincrement())
  email                           String     @unique
  password                        String
  name                            String
  isFirstLogin                    Boolean    @default(true)
  avatar                          String?
  biography                       String
  roleId                          Int?       @default(2)
  creationDate                    DateTime   @default(now())
  lastUpdated                     DateTime   @default(now())
  softDelete                      Boolean    @default(false)
  packId                          Int?
  shortId                         Int?
  Block_Block_blockedIdToUser     Block[]    @relation("Block_blockedIdToUser")
  Block_Block_blockerIdToUser     Block[]    @relation("Block_blockerIdToUser")
  Comment_Comment_creatorIdToUser Comment[]  @relation("Comment_creatorIdToUser")
  Feedback                        Feedback[]
  Log                             Log[]
  Pack_Pack_creatorIdToUser       Pack[]     @relation("Pack_creatorIdToUser")
  Read                            Read[]
  Report                          Report[]
  Short_Short_creatorIdToUser     Short[]    @relation("Short_creatorIdToUser")
  Pack                            Pack?      @relation(fields: [packId], references: [id])
  role                            Role?      @relation(fields: [roleId], references: [id])
  ClappedShorts                   Short[]    @relation("Short_toUserClap")
  Short_bookmarkedBy              Short[]    @relation("bookmarkedBy")
  Pack_bookmarkedByForPack        Pack[]     @relation("bookmarkedByForPack")
  Comment_commentDownVote         Comment[]  @relation("commentDownVote")
  Comment_commentUpVote           Comment[]  @relation("commentUpVote")
  Short_downVote                  Short[]    @relation("downVote")
  Short_upVote                    Short[]    @relation("upVote")
  Pack_userClap                   Pack[]     @relation("userClap")
}

enum Log_action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum Report_reportType {
  PACK
  SHORT
  COMMENT
}
